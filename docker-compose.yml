# AI Bull Ford (AIBF) - Docker Compose Configuration
# Complete development and production environment setup

version: '3.8'

services:
  # Main AIBF Application
  aibf-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_ENV: ${BUILD_ENV:-production}
        INSTALL_DEV: ${INSTALL_DEV:-false}
    container_name: aibf-app
    restart: unless-stopped
    ports:
      - "8000:8000"  # REST API
      - "8001:8001"  # WebSocket
      - "8002:8002"  # Admin Dashboard
      - "50051:50051"  # gRPC
    environment:
      - AIBF_ENV=${AIBF_ENV:-production}
      - AIBF_DEBUG=${AIBF_DEBUG:-false}
      - AIBF_LOG_LEVEL=${AIBF_LOG_LEVEL:-INFO}
      - AIBF_DATABASE_URL=postgresql://aibf:${POSTGRES_PASSWORD:-aibf123}@postgres:5432/aibf
      - AIBF_REDIS_URL=redis://redis:6379/0
      - AIBF_ELASTICSEARCH_URL=http://elasticsearch:9200
      - AIBF_MONGODB_URL=mongodb://mongo:27017/aibf
      - AIBF_SECRET_KEY=${AIBF_SECRET_KEY:-your-secret-key-change-in-production}
      - AIBF_JWT_SECRET=${AIBF_JWT_SECRET:-your-jwt-secret-change-in-production}
      - AIBF_ENCRYPTION_KEY=${AIBF_ENCRYPTION_KEY:-your-encryption-key-change-in-production}
    volumes:
      - ./config:/app/config:ro
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - aibf-static:/app/static
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - mongo
    networks:
      - aibf-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aibf-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=aibf
      - POSTGRES_USER=aibf
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aibf123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - aibf-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aibf -d aibf"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aibf-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - aibf-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Elasticsearch for Search and Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: aibf-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - aibf-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB for Document Storage
  mongo:
    image: mongo:7
    container_name: aibf-mongo
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-mongo123}
      - MONGO_INITDB_DATABASE=aibf
    volumes:
      - mongo-data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    networks:
      - aibf-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aibf-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - aibf-static:/var/www/static:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - aibf-app
    networks:
      - aibf-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: aibf-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - aibf-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: aibf-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - aibf-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: aibf-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "6831:6831/udp"  # Jaeger agent UDP
    networks:
      - aibf-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: aibf-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD:-minioadmin123}
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"  # MinIO API
      - "9001:9001"  # MinIO Console
    networks:
      - aibf-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: aibf-chromadb
    restart: unless-stopped
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - chromadb-data:/chroma/chroma
    ports:
      - "8003:8000"
    networks:
      - aibf-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

# Development Services (only for development environment)
  # Jupyter Lab
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: aibf-jupyter
    restart: unless-stopped
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=''
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./models:/app/models
    networks:
      - aibf-network
    profiles:
      - development

  # pgAdmin for PostgreSQL Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: aibf-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@aibf.ai}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - aibf-network
    profiles:
      - development

# Networks
networks:
  aibf-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local
  mongo-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  minio-data:
    driver: local
  chromadb-data:
    driver: local
  pgadmin-data:
    driver: local
  aibf-static:
    driver: local