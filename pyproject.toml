[build-system]
requires = [
    "setuptools>=68.0",
    "wheel>=0.41.0",
    "pybind11>=2.11.0",
    "pybind11[global]>=2.11.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "ai-bull-ford"
version = "0.1.0"
description = "Advanced AI Framework for Intelligent Systems Development"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "AIBF Team", email = "team@aibf.ai"},
]
maintainers = [
    {name = "AIBF Team", email = "maintainers@aibf.ai"},
]
keywords = [
    "artificial intelligence",
    "machine learning",
    "deep learning",
    "neural networks",
    "transformers",
    "reinforcement learning",
    "multi-agent systems",
    "natural language processing",
    "computer vision",
    "multimodal ai",
    "rag",
    "fine-tuning",
    "api framework",
    "microservices",
    "monitoring",
    "mlops",
    "ai framework",
    "intelligent systems",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: C++",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Framework :: AsyncIO",
    "Framework :: FastAPI",
]

# Core dependencies
dependencies = [
    "torch>=2.1.0",
    "transformers>=4.35.0",
    "numpy>=1.24.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "PyYAML>=6.0.1",
    "requests>=2.31.0",
    "aiohttp>=3.9.0",
    "sqlalchemy>=2.0.0",
    "redis>=5.0.0",
    "psutil>=5.9.0",
    "structlog>=23.2.0",
    "click>=8.1.0",
    "python-dotenv>=1.0.0",
]

# Optional dependencies
[project.optional-dependencies]
ml = [
    "scikit-learn>=1.3.0",
    "pandas>=2.1.0",
    "scipy>=1.11.0",
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
]
nlp = [
    "spacy>=3.7.0",
    "nltk>=3.8.1",
    "sentence-transformers>=2.2.0",
    "langchain>=0.0.350",
    "openai>=1.3.0",
]
vision = [
    "opencv-python>=4.8.0",
    "Pillow>=10.1.0",
    "albumentations>=1.3.0",
    "torchvision>=0.16.0",
]
audio = [
    "librosa>=0.10.0",
    "soundfile>=0.12.0",
    "torchaudio>=2.1.0",
]
rl = [
    "gym>=0.29.0",
    "stable-baselines3>=2.2.0",
    "ray[rllib]>=2.8.0",
]
quantum = [
    "qiskit>=0.45.0",
    "cirq>=1.3.0",
]
graph = [
    "torch-geometric>=2.4.0",
    "networkx>=3.2.0",
    "dgl>=1.1.0",
]
distributed = [
    "ray>=2.8.0",
    "dask[complete]>=2023.10.0",
    "celery>=5.3.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "grafana-api>=1.0.3",
    "sentry-sdk>=1.38.0",
]
database = [
    "psycopg2-binary>=2.9.0",
    "pymongo>=4.6.0",
    "elasticsearch>=8.11.0",
    "chromadb>=0.4.0",
]
cloud = [
    "boto3>=1.34.0",
    "azure-storage-blob>=12.19.0",
    "google-cloud-storage>=2.10.0",
]
deployment = [
    "docker>=6.1.0",
    "kubernetes>=28.1.0",
    "gunicorn>=21.2.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.10.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "ruff>=0.1.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipykernel>=6.26.0",
    "nbconvert>=7.11.0",
]
all = [
    "ai-bull-ford[ml,nlp,vision,audio,rl,quantum,graph,distributed,monitoring,database,cloud,deployment]",
]
dev-all = [
    "ai-bull-ford[dev,docs,jupyter]",
]

[project.urls]
Homepage = "https://github.com/your-org/ai-bull-ford"
Documentation = "https://aibf.readthedocs.io"
Repository = "https://github.com/your-org/ai-bull-ford"
"Bug Reports" = "https://github.com/your-org/ai-bull-ford/issues"
Funding = "https://github.com/sponsors/your-org"
"Say Thanks!" = "https://github.com/your-org/ai-bull-ford/discussions"

[project.scripts]
aibf = "aibf.cli:main"
aibf-server = "aibf.server:main"
aibf-train = "aibf.training:main"
aibf-deploy = "aibf.deployment:main"
aibf-monitor = "aibf.monitoring.cli:main"
aibf-config = "aibf.config.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
aibf = [
    "config/*.yaml",
    "config/*.json",
    "templates/*.html",
    "templates/*.js",
    "templates/*.css",
    "static/*",
    "models/*.json",
    "schemas/*.json",
    "data/*.json",
    "data/*.csv",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
  )/
)
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
skip_glob = ["**/migrations/*"]

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py310"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "TRY003", # avoid specifying long messages outside the exception class
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]
"src/aibf/migrations/**/*" = ["ERA001"]

[tool.ruff.lint.isort]
known-first-party = ["aibf"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "sklearn.*",
    "cv2.*",
    "librosa.*",
    "ray.*",
    "qiskit.*",
    "cirq.*",
    "dgl.*",
    "networkx.*",
    "psutil.*",
    "redis.*",
    "pymongo.*",
    "elasticsearch.*",
    "chromadb.*",
    "boto3.*",
    "azure.*",
    "google.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "distributed: marks tests that require distributed setup",
    "quantum: marks tests that require quantum simulators",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/.venv/*",
    "*/site-packages/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

# Pre-commit hooks configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.5.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
            {id = "debug-statements"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.10.1",
        hooks = [
            {id = "black", language_version = "python3"}
        ]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [
            {id = "isort"}
        ]
    },
    {
        repo = "https://github.com/charliermarsh/ruff-pre-commit",
        rev = "v0.1.5",
        hooks = [
            {id = "ruff", args = ["--fix"]}
        ]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.7.1",
        hooks = [
            {id = "mypy", additional_dependencies = ["types-all"]}
        ]
    },
]

# Semantic release configuration
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["src/aibf/__version__.py:__version__"]
build_command = "pip install build && python -m build"
upload_to_pypi = false
upload_to_release = true
remove_dist = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "^docs:",
    "^test:",
    "^ci:",
    "^chore:",
    "^style:",
    "^refactor:",
]

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.branches.develop]
match = "develop"
prerelease = true
prerelease_token = "dev"

# Hatch configuration for build
[tool.hatch.version]
path = "src/aibf/__version__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/aibf"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
    "/pyproject.toml",
    "/requirements.txt",
    "/config.yaml",
]
exclude = [
    "/.git",
    "/.github",
    "/.vscode",
    "/.pytest_cache",
    "/.mypy_cache",
    "/.ruff_cache",
    "/htmlcov",
    "/.coverage",
    "/dist",
    "/build",
    "*.pyc",
    "__pycache__",
]